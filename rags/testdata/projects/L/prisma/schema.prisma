// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  name      String?
  email     String   @unique
  hash      String  @db.VarChar(400)
  firmName   String?
  practice  String?
  state     String?
  weburl    String?
  role      Role     @default(USER)
  prompts   Prompt[]
  receipts  Receipt[]
  accounts  Account[]
  locations  Location[]
}


model Prompt{
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firmName     String
  practice    String
  state       String
  weburl      String?
  iconurl     String?
  posts       Post[]    
  photos      Photo[]  
  client      User?     @relation(fields: [clientId], references: [id])
  clientId    String?   @db.Uuid
  createdAt   DateTime  @default(now())
}


model Post {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String    @db.VarChar(400)
  body      String    @db.VarChar(900)
  hashtags  String[]
  keywords  String[]
  imgDesc   String
  link      String?
  photos    Photo[]
  prompt    Prompt    @relation(fields: [promptId], references: [id])
  promptId  String    @db.Uuid
  receipts  Receipt[]
}
model Photo {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url       String
  keywords  String[]
  height    Int?
  width     Int?
  blob      Bytes     @db.ByteA
  geoData   String[]
  alt       String?
  post      Post      @relation(fields: [postId], references: [id]) 
  postId    String    @db.Uuid
  prompt    Prompt    @relation(fields: [promptId], references: [id])
  promptId  String    @db.Uuid
  receipts  Receipt[] 
}
model Receipt{
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  platform  Platform  @default(GOOGLE)
  location  Location  @relation(fields:[locationId], references: [id])
  locationId  String  @db.Uuid
  photo     Photo @relation(fields:[photoId], references: [id])
  photoId   String @db.Uuid
  post      Post @relation(fields:[postId], references: [id])
  postId    String @db.Uuid
  user      User   @relation(fields:[userId], references: [id])
  userId    String @db.Uuid
  link      String?
  createdAt   DateTime  @default(now())

}
model Account{
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  platform    Platform  @default(GOOGLE)
  credentials String?
  accountName String
  accountId   String?
  link        String?
  user        User    @relation(fields:[userId], references:[id])
  userId      String  @db.Uuid
}
model Location{
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  Address     String[]
  geo         Float[]
  googleId    String
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @db.Uuid
  Receipts    Receipt[]
}


enum Role {
  USER
  ADMIN
}
enum Platform {
  FACEBOOK
  GOOGLE
  INSTAGRAM
  LINKEDIN
  TWITTER
}